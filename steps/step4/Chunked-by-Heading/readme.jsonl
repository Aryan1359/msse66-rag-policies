{"doc_id": "readme", "chunk_id": 0, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# MSSE66 RAG — Company Policies Q&A\n\nRetrieval‐Augmented Generation (RAG) app that answers questions about a small corpus of **company policies**. Built as part of the **MSSE66+ AI Engineering Project** and aligned to the rubric (env + CI, ingestion, retrieval, deploy, evaluation)."}
{"doc_id": "readme", "chunk_id": 1, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---"}
{"doc_id": "readme", "chunk_id": 2, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "## 📌 Status (end of Phase 2)\n\n**Done:**\n\n* Repo + Codespaces, `.venv`, Python pinned (3.12.1 via `.python-version`, `runtime.txt`)\n* Minimal deps: `Flask`, `python-dotenv`\n* Flask endpoints: `/` and `/health`\n* CI: `.github/workflows/ci.yml` smoke‐tests `import app`\n* Corpus: `data/policies/*.md` (PTO, Expenses, Remote Work)"}
{"doc_id": "readme", "chunk_id": 3, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "* Ingestion & Indexing scripts:\n\n  * `scripts/ingest.py` → doc stats\n  * `scripts/chunk.py` → overlapping chunks\n  * `scripts/index_jsonl.py` → writes `data/index/policies.jsonl`\n  * `scripts/search_jsonl.py` → tiny keyword search (CLI)\n* API: `/search?q=...&topk=...` returns keyword‐matched chunks (JSON)\n\n**Next:** Phase 3 (Embeddings + vector search) → Phase 4 (UI) → Phase 5 (Deploy) → Phase 6 (Eval)"}
{"doc_id": "readme", "chunk_id": 4, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---"}
{"doc_id": "readme", "chunk_id": 5, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "## 🚀 Quickstart (GitHub Codespaces)\n\n```bash"}
{"doc_id": "readme", "chunk_id": 6, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# 1) Activate the virtualenv\nsource .venv/bin/activate"}
{"doc_id": "readme", "chunk_id": 7, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# 2) (Re)build JSONL index if you changed policies\npython scripts/index_jsonl.py"}
{"doc_id": "readme", "chunk_id": 8, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# 3) Run the app (serves on port 8000)\npython app.py\n```\n\n**Test locally from the terminal inside Codespaces:**\n\n```bash"}
{"doc_id": "readme", "chunk_id": 9, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# Health\ncurl \"http://127.0.0.1:8000/health\""}
{"doc_id": "readme", "chunk_id": 10, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# Keyword search\ncurl \"http://127.0.0.1:8000/search?q=pto%20accrual&topk=3\"\n```\n\n> In the browser, use your **forwarded URL** (looks like `https://<id>-8000.app.github.dev/`). In the terminal, prefer `http://127.0.0.1:8000`."}
{"doc_id": "readme", "chunk_id": 11, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---"}
{"doc_id": "readme", "chunk_id": 12, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "## 🧩 What’s implemented (Phase 2)\n\n* **Corpus** in `data/policies/`: small, legal‐to‐use Markdown files.\n* **Loader (`scripts/ingest.py`)** prints words/lines/headings per file.\n* **Chunker (`scripts/chunk.py`)** creates ~600‐char chunks with ~100‐char overlap, preferring breaks on blank lines/headings.\n* **Index writer (`scripts/index_jsonl.py`)** emits one JSON object per chunk to `data/index/policies.jsonl` with ids, text, and rough token counts.\n* **Keyword search (CLI)** scores by simple term frequencies with word boundaries.\n* **Flask `/search`** mirrors the CLI search and returns top‐k results with previews and metadata."}
{"doc_id": "readme", "chunk_id": 13, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---"}
{"doc_id": "readme", "chunk_id": 14, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "## 📁 Repository Structure\n\n```\nmsse66-rag-policies/\n├─ app.py                          # Flask app with /, /health, /search\n├─ data/\n│  ├─ policies/                    # Policy corpus (Markdown)\n│  │  ├─ 01-pto.md\n│  │  ├─ 02-expenses.md\n│  │  └─ 03-remote-work.md\n│  └─ index/\n│     └─ policies.jsonl            # Generated JSONL index (build via scripts)\n├─ scripts/\n│  ├─ ingest.py                    # Corpus stats\n│  ├─ chunk.py                     # Overlapping chunker\n│  ├─ index_jsonl.py               # Write JSONL index\n│  └─ search_jsonl.py              # CLI keyword search over JSONL\n├─ .github/workflows/ci.yml        # CI: install deps + smoke test\n├─ requirements.txt\n├─ .python-version\n├─ runtime.txt\n├─ Instruction.md                  # Mentor/working-mode instructions\n├─ LEARNING-GUIDE.md               # Beginner guide (what/why/how)\n├─ checklist.md                    # Master checklist (rubric aligned)\n└─ PROGRESS-LOG.md                 # Chronological log\n```"}
{"doc_id": "readme", "chunk_id": 15, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---"}
{"doc_id": "readme", "chunk_id": 16, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "## 🔄 Branch / PR Workflow (beginner‐proof)\n\n1. Create a feature branch: `git checkout -b <feature>`\n2. Make a tiny change; verify locally\n3. `git add ... && git commit -m \"<scope>: <message>\"`\n4. `git push -u origin <feature>` → Open PR → Merge → Delete branch\n5. Sync: `git checkout main && git pull`"}
{"doc_id": "readme", "chunk_id": 17, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---"}
{"doc_id": "readme", "chunk_id": 18, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "## 🧪 Verification Cheatsheet\n\n```bash"}
{"doc_id": "readme", "chunk_id": 19, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# Stats\npython scripts/ingest.py"}
{"doc_id": "readme", "chunk_id": 20, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# Chunking\npython scripts/chunk.py"}
{"doc_id": "readme", "chunk_id": 21, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# Index build\npython scripts/index_jsonl.py && wc -l data/index/policies.jsonl"}
{"doc_id": "readme", "chunk_id": 22, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# CLI search\npython scripts/search_jsonl.py \"pto accrual\" --topk 3"}
{"doc_id": "readme", "chunk_id": 23, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "# API search\ncurl \"http://127.0.0.1:8000/search?q=pto%20accrual&topk=3\"\n```"}
{"doc_id": "readme", "chunk_id": 24, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---"}
{"doc_id": "readme", "chunk_id": 25, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "## 🧭 Roadmap (Phases 3–6)\n\n**Phase 3 — Embeddings & Vector Search**\n\n* Choose embeddings: local (`sentence-transformers`) vs API provider\n* `scripts/embed_index.py` → create vectors (e.g., `.npy` + `meta.json`)\n* `scripts/vector_search.py` → cosine similarity top‐k\n* Extend Flask `/search?mode=vector` with citations (doc_id + chunk_id)\n\n**Phase 4 — Web UI**\n\n* Minimal search page calling `/search`\n* Display sources + highlighted snippets\n\n**Phase 5 — Deployment & CI/CD**\n\n* Deploy on Render/Railway (free tier)\n* GH Actions: deploy on `main`\n\n**Phase 6 — Evaluation**\n\n* 15–30 Q/A set over policies\n* Metrics: groundedness, citation accuracy, latency (p50/p95)\n* Report in `design-and-evaluation.md`"}
{"doc_id": "readme", "chunk_id": 26, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---"}
{"doc_id": "readme", "chunk_id": 27, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "## 🛠️ Troubleshooting\n\n* `ModuleNotFoundError: flask` → `source .venv/bin/activate`\n* 404 on `/search` → ensure route is defined **before** `app.run(...)`; restart server\n* `curl` to `app.github.dev` shows nothing → test via `http://127.0.0.1:8000` inside terminal"}
{"doc_id": "readme", "chunk_id": 28, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---"}
{"doc_id": "readme", "chunk_id": 29, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "## 🤖 AI Use & CI Disclosure\n\n* AI helpers: **ChatGPT‐5** (mentor/co‐dev) + optional **GitHub Copilot**\n* CI: runs on each push/PR, installs deps, smoke‐tests `import app`"}
{"doc_id": "readme", "chunk_id": 30, "method": "heading", "params": {"mode": "heuristic", "min_heading_gap": 1, "max_chunk_len": null}, "text": "---\n\n**Maintainer:** Aryan Yaghobi\n**Mentor / AI Co‐Developer:** ChatGPT‐5\n\n> This README documents Phase 2 completion and provides clear run steps, verification, and a rubric‐aligned roadmap."}
